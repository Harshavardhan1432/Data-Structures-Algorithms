import java.util.Scanner;public class LinkedList {    static Scanner hv = new Scanner(System.in);    public static Node create() {        System.out.print("Enter Registration Number: ");        int regNo = hv.nextInt();        System.out.print("Enter Marks: ");        float marks = hv.nextFloat();        System.out.println("LinkedList created...");        return new Node(regNo, marks);    }    public static Node insertBeg(Node start) {        System.out.print("Enter Registration Number: ");        int regNo = hv.nextInt();        System.out.print("Enter Marks: ");        float marks = hv.nextFloat();        Node newNode = new Node(regNo, marks);        newNode.next = start;        System.out.println("Node inserted at the beginning...");        return newNode;    }    public static Node insertEnd(Node start) {        System.out.print("Enter Registration Number: ");        int regNo = hv.nextInt();        System.out.print("Enter Marks: ");        float marks = hv.nextFloat();        Node newNode = new Node(regNo, marks);        if (start == null) {            return newNode;        }        Node temp = start;        while (temp.next != null) {            temp = temp.next;        }        temp.next = newNode;        System.out.println("Node inserted at the end...");        return start;    }    public static Node insertAny(Node start) {        System.out.print("Enter the position to insert at: ");        int pos = hv.nextInt();        if (pos == 1) {            return insertBeg(start);        }        Node temp = start;        for (int i = 2; i < pos; i++) {            if (temp.next == null) {                System.out.println("Invalid position...");                return start;            }            temp = temp.next;        }        System.out.print("Enter Registration Number: ");        int regNo = hv.nextInt();        System.out.print("Enter Marks: ");        float marks = hv.nextFloat();        Node newNode = new Node(regNo, marks);        newNode.next = temp.next;        temp.next = newNode;        System.out.println("Node inserted at position " + pos);        return start;    }    public static Node deleteBeg(Node start) {        if (start == null) {            System.out.println("List is empty...");            return null;        }        System.out.println("Node deleted at the beginning...");        return start.next;    }    public static Node deleteEnd(Node start) {        if (start == null) {            System.out.println("List is empty...");            return null;        }        if (start.next == null) {            System.out.println("Node deleted at the end...");            return null;        }        Node temp = start;        while (temp.next.next != null) {            temp = temp.next;        }        temp.next = null;        System.out.println("Node deleted at the end...");        return start;    }    public static Node deleteAny(Node start) {        System.out.print("Enter the position to delete at: ");        int pos = hv.nextInt();        if (pos == 1) {            return deleteBeg(start);        }        Node temp = start;        for (int i = 2; i < pos; i++) {            if (temp.next == null) {                System.out.println("Invalid position...");                return start;            }            temp = temp.next;        }        temp.next = temp.next.next;        System.out.println("Node deleted at position " + pos);        return start;    }    public static Node deleteByRegNo(Node start) {        System.out.print("Enter Registration Number to delete: ");        int regNo = hv.nextInt();        if (start == null) {            System.out.println("List is empty...");            return null;        }        if (start.regNo == regNo) {            System.out.println("Node with Registration Number " + regNo + " deleted.");            return start.next;        }        Node temp = start;        while (temp.next != null && temp.next.regNo != regNo) {            temp = temp.next;        }        if (temp.next == null) {            System.out.println("Node not found...");            return start;        }        temp.next = temp.next.next;        System.out.println("Node with Registration Number " + regNo + " deleted.");        return start;    }    public static void search(Node start) {        System.out.print("Enter Registration Number to search: ");        int regNo = hv.nextInt();        Node temp = start;        while (temp != null && temp.regNo != regNo) {            temp = temp.next;        }        if (temp == null) {            System.out.println("Node not found...");            return;        }        System.out.print("Enter new marks: ");        temp.marks = hv.nextFloat();        System.out.println("Marks updated...");    }    public static void sort(Node start) {        if (start == null) {            System.out.println("List is empty...");            return;        }        boolean swapped;        Node temp;        do {            swapped = false;            temp = start;            while (temp.next != null) {                if (temp.marks > temp.next.marks) {                    float tempMarks = temp.marks;                    int tempRegNo = temp.regNo;                    temp.marks = temp.next.marks;                    temp.regNo = temp.next.regNo;                    temp.next.marks = tempMarks;                    temp.next.regNo = tempRegNo;                    swapped = true;                }                temp = temp.next;            }        } while (swapped);        System.out.println("List sorted...");    }    public static int count(Node start) {        int count = 0;        Node temp = start;        while (temp != null) {            count++;            temp = temp.next;        }        return count;    }    public static Node reverse(Node start) {        Node prev = null, current = start, next;        while (current != null) {            next = current.next;            current.next = prev;            prev = current;            current = next;        }        System.out.println("List reversed...");        return prev;    }    public static void display(Node start) {        if (start == null) {            System.out.println("List is empty...");            return;        }        System.out.println("Registration Number\tMarks");        Node temp = start;        while (temp != null) {            System.out.println(temp.regNo + "\t\t" + temp.marks);            temp = temp.next;        }    }    public static void main(String[] args) {        Node start = null;        System.out.println("**** MENU ****");        System.out.println("0: Exit");        System.out.println("1: Create");        System.out.println("2: Display");        System.out.println("3: Insert at the beginning");        System.out.println("4: Insert at the end");        System.out.println("5: Insert at any position");        System.out.println("6: Delete from the beginning");        System.out.println("7: Delete from the end");        System.out.println("8: Delete from any position");        System.out.println("9: Delete by Registration Number");        System.out.println("10: Search and update marks");        System.out.println("11: Sort the list");        System.out.println("12: Count the nodes");        System.out.println("13: Reverse the list");        while (true) {            System.out.print("Enter your choice: ");            int choice = hv.nextInt();            switch (choice) {                case 0:                    System.out.println("Exiting... Have a great day!");                    System.exit(0);                case 1:                    start = create();                    break;                case 2:                    display(start);                    break;                case 3:                    start = insertBeg(start);                    break;                case 4:                    start = insertEnd(start);                    break;                case 5:                    start = insertAny(start);                    break;                case 6:                    start = deleteBeg(start);                    break;                case 7:                    start = deleteEnd(start);                    break;                case 8:                    start = deleteAny(start);                    break;                case 9:                    start = deleteByRegNo(start);                    break;                case 10:                    search(start);                    break;                case 11:                    sort(start);                    break;                case 12:                    System.out.println("Number of nodes: " + count(start));                    break;                case 13:                    start = reverse(start);                    break;                default:                    System.out.println("Invalid choice! Please enter a valid option.");            }        }    }}
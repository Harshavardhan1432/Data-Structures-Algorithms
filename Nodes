import java.util.Scanner;
class Node {
    protected int regd_no,
    protected float marks;
    protected Node next;

    public Node(int regd_no, float marks, Node next) {
        this.regd_no = regd_no;
        this.marks = marks;
        this.next = null;
    }

    public class LinkedList
    {
        public static void create (Node start)
        {
            Scanner hv = new Scanner(System.in);
            System.out.println("Enter The registration number : ");
            int regd_no = hv.nextInt();
            System.out.println("Enter marks : ");
            float marks = hv.nextFloat();
            start.regd_no = regd_no;
            start.marks = marks;
            start.next = null;
        }

        public static void display(Node start)
        {
            Node current = start;
            if (current ==  null) {
                System.out.println("List is empty");
                return;
            }
            while (current != null)
            {
                System.out.println("Current regd_no ");
                current = current.next;
            }
        }
        public static Node InsBeg(Node start)
        {
            Scanner hv = new Scanner(System.in);
            System.out.println("Enter Registration number : ");
            int regd_no = hv.nextInt();
            System.out.println("Marks");
            float marks = hv.nextFloat();
            Node newNode = new Node(regd_no, marks);
            newNode.next = start;
            return newNode;
        }

        public static Node InsEnd(Node start)
        {
            Scanner hv = new Scanner(System.in);
            System.out.println("Enter Registration number : ");
            int regd_no = hv.nextInt();
            System.out.println("Marks");
            float marks = hv.nextFloat();
            Node newNode = new Node(regd_no, marks);
            if (start == null)
            {
                return newNode;
            }
            Node current = start;
            while (curent.next != null)
            {
                current = current.next;
            }
            current.next = newNode;
            return start;
        }
    }
}
